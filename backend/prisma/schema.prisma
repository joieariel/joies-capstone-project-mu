// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
 provider = "prisma-client-js"
}


datasource db {
 provider = "postgresql"
 url      = env("DATABASE_URL")
}


model User {
 id         Int      @id @default(autoincrement())
 supabase_user_id String?  @unique // links to supabase auth user ID (nullable for migration)
 profile_pic String? // user profile pic
 first_name String
 last_name  String
 username   String   @unique
 email      String   @unique
 status     String
 birthdate  DateTime
 zip_code   String
 city       String
 state      String
 created_at  DateTime @default(now())


 reviews    Review[]
 likes      Likes[] // relation to liked centers
 dislikes   Dislikes[] // relation to disliked centers
 filterInteractions FilterInteraction[] // relation to filter interactions
 pageInteractions PageInteraction[] // relation to page interactions
}


model Review {
 id                  Int      @id @default(autoincrement())
 rating              Int
 comment             String
 created_at           DateTime @default(now())


 user_id             Int
 center_id  Int


 user                User            @relation(fields: [user_id], references: [id])
 community_center     CommunityCenter @relation(fields: [center_id], references: [id])


 images ReviewImage[]
 reviewTags ReviewTag[] // relationship to junction table for review-specific tags
}


// to allow for multiple images per review
model ReviewImage {
 id          Int      @id @default(autoincrement())
 image_url   String
 review_id   Int
 review      Review   @relation(fields: [review_id], references: [id])
}


model CommunityCenter {
 id           Int      @id @default(autoincrement())
 name         String
 address      String
 email        String
 zip_code     String
 phone_number String
 image_url    String
 description  String
 latitude     Float
 longitude    Float
 timezone     String   @default("America/New_York") // timezone where the center is located
 created_at    DateTime @default(now())


 reviews      Review[]
 hours        CenterHours[]
 centerTags   CenterTag[] // relationship to junction table allows commmunity centet to access their tags
 likedBy      Likes[] // relation to users who liked this center
 dislikedBy   Dislikes[] // relation to users who disliked this center
 pageInteractions PageInteraction[] // relation to page interactions
}


// to community center hours for open now enhanced search feature
model CenterHours {
 id          Int      @id @default(autoincrement())
 center_id   Int
 day         String
 open_time   String? // "e.g 1:00" - nullable
 close_time  String? // nullable for closed days
 is_closed   Boolean @default(false) // if a center is always closed on a given day of the week
 center      CommunityCenter @relation(fields: [center_id], references: [id])

}

model Tag {
 id          Int      @id @default(autoincrement())
 name        String   @unique // tag label - made unique to prevent duplicates

 centerTags  CenterTag[] // relatinoship to junction table
 reviewTags  ReviewTag[] // relationship to junction table for review-specific tags
 filterInteractions FilterInteraction[] // relation to filter interactions
}

// new junction table for many-to-many relationship between CommunityCenter and Tag
model CenterTag {
 id          Int      @id @default(autoincrement())
 center_id   Int
 tag_id      Int

 center      CommunityCenter @relation(fields: [center_id], references: [id])
 tag         Tag             @relation(fields: [tag_id], references: [id])

 @@unique([center_id, tag_id]) // to prevent duplicate tag assignments
}

// junction table for many-to-many relationship between Review and Tag
model ReviewTag {
 id          Int      @id @default(autoincrement())
 review_id   Int
 tag_id      Int

 review      Review @relation(fields: [review_id], references: [id], onDelete: Cascade)
 tag         Tag    @relation(fields: [tag_id], references: [id])

 @@unique([review_id, tag_id]) // to prevent duplicate tag assignments for same review
}

// model to track which centers users have liked
model Likes {
 id          Int      @id @default(autoincrement())
 user_id     Int
 center_id   Int
 created_at  DateTime @default(now())

 user        User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
 center      CommunityCenter @relation(fields: [center_id], references: [id], onDelete: Cascade)

 @@unique([user_id, center_id]) // to prevent duplicate likes for the same center by the same user
}

// model to track which centers users have disliked
model Dislikes {
 id          Int      @id @default(autoincrement())
 user_id     Int
 center_id   Int
 created_at  DateTime @default(now())

 user        User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
 center      CommunityCenter @relation(fields: [center_id], references: [id], onDelete: Cascade)

 @@unique([user_id, center_id]) // to prevent duplicate dislikes for the same center by the same user
}

// model to track filter interactions (which search filters from advanced search users click on most frequently)
model FilterInteraction {
 id          Int      @id @default(autoincrement())
 user_id     Int
 tag_id      Int
 filter_count       Int      @default(1) // number of times user has clicked this filter
 last_used   DateTime @default(now()) // timestamp of most recent interaction to prioritize order
 created_at  DateTime @default(now()) // timestamp of first interaction

 user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
 tag         Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

 @@unique([user_id, tag_id]) // to prevent duplicate entries for the same user and tag
}

// model to track on-page interactions (scroll depth, clicks on map/reviews/etc.)
model PageInteraction {
 id                Int      @id @default(autoincrement())
 user_id           Int
 center_id         Int
 scroll_depth      Int      @default(0) // percentage of reviews page scrolled (0-100)
 map_clicks        Int      @default(0) // number of times user clicked on the map button on the center card
 review_clicks     Int      @default(0) // number of times user clicked on reviews button
 similar_clicks    Int      @default(0) // number of times user explored similar centers button
 visit_count       Int      @default(1) // number of times user visited this center's page
 last_visited      DateTime @default(now()) // timestamp of most recent visit to prioritize order
 created_at        DateTime @default(now()) // timestamp of first visit

 user              User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
 center            CommunityCenter @relation(fields: [center_id], references: [id], onDelete: Cascade)

 @@unique([user_id, center_id]) // to ensure one record per user-center combination
}
